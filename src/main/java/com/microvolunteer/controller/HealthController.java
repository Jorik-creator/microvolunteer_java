package com.microvolunteer.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.Data;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDateTime;
import java.util.Map;

@RestController
@RequestMapping("/api")
@Tag(name = "üè• Health & Info", description = "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API")
public class HealthController {

    @Operation(
        summary = "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ API",
        description = """
            –ü—Ä–æ—Å—Ç–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ API –ø—Ä–∞—Ü—é—î.
            
            **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**
            - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É
            - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏
            - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            """,
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "API –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
                content = @Content(
                    mediaType = "application/json",
                    examples = @ExampleObject(
                        value = """
                            {
                              "status": "UP",
                              "message": "Microvolunteer API –ø—Ä–∞—Ü—é—î",
                              "timestamp": "2024-01-15T10:30:00",
                              "version": "1.0.0"
                            }
                            """
                    )
                )
            )
        }
    )
    @GetMapping("/health")
    public ResponseEntity<HealthStatus> health() {
        return ResponseEntity.ok(HealthStatus.builder()
                .status("UP")
                .message("ü§ù Microvolunteer API –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
                .timestamp(LocalDateTime.now())
                .version("1.0.0")
                .build());
    }

    @Operation(
        summary = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API",
        description = """
            –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API —Ç–∞ –π–æ–≥–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.
            
            **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤–∫–ª—é—á–∞—î:**
            - –û–ø–∏—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
            - –î–æ—Å—Ç—É–ø–Ω—ñ endpoints
            - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏
            """
    )
    @GetMapping("/info")
    public ResponseEntity<Map<String, Object>> info() {
        return ResponseEntity.ok(Map.of(
            "name", "Microvolunteer API",
            "description", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è –≤–æ–ª–æ–Ω—Ç–µ—Ä—ñ–≤ —Ç–∞ –ª—é–¥–µ–π, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–ø–æ–º–æ–≥–∏",
            "version", "1.0.0",
            "endpoints", Map.of(
                "tasks", "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞",
                "users", "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏",
                "categories", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–¥–∞–Ω—å",
                "participations", "–°–∏—Å—Ç–µ–º–∞ —É—á–∞—Å—Ç—ñ —É –∑–∞–≤–¥–∞–Ω–Ω—è—Ö",
                "auth", "–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
            ),
            "features", Map.of(
                "authentication", "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Keycloak",
                "security", "JWT —Ç–æ–∫–µ–Ω–∏",
                "database", "PostgreSQL –∑ Flyway –º—ñ–≥—Ä–∞—Ü—ñ—è–º–∏",
                "documentation", "OpenAPI 3.0 –∑ Swagger UI",
                "testing", "Unit —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏"
            ),
            "contact", Map.of(
                "email", "contact@microvolunteer.com",
                "github", "https://github.com/microvolunteer"
            ),
            "swagger_ui", "/swagger-ui.html",
            "api_docs", "/v3/api-docs",
            "timestamp", LocalDateTime.now()
        ));
    }

    @Data
    @lombok.Builder
    @Schema(description = "–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤'—è API")
    public static class HealthStatus {
        @Schema(description = "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏", example = "UP")
        private String status;
        
        @Schema(description = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω", example = "API –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        private String message;
        
        @Schema(description = "–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
        private LocalDateTime timestamp;
        
        @Schema(description = "–í–µ—Ä—Å—ñ—è API", example = "1.0.0")
        private String version;
    }
}
