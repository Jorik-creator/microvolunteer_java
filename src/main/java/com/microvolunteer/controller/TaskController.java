package com.microvolunteer.controller;

import com.microvolunteer.dto.request.TaskCreateRequest;
import com.microvolunteer.dto.request.TaskSearchRequest;
import com.microvolunteer.dto.response.TaskResponse;
import com.microvolunteer.entity.Category;
import com.microvolunteer.entity.Task;
import com.microvolunteer.entity.User;
import com.microvolunteer.enums.TaskStatus;
import com.microvolunteer.mapper.TaskMapper;
import com.microvolunteer.service.CategoryService;
import com.microvolunteer.service.TaskService;
import com.microvolunteer.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@RestController
@RequestMapping("/api/tasks")
@RequiredArgsConstructor
@Tag(name = "üìã Tasks", description = "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞")
public class TaskController {

    private final TaskService taskService;
    private final UserService userService;
    private final CategoryService categoryService;
    private final TaskMapper taskMapper;

    @Operation(
        summary = "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è",
        description = """
            –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å —É —Å–∏—Å—Ç–µ–º—ñ.
            
            **–ú–æ–∂–ª–∏–≤—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**
            - –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
            """,
        tags = {"Tasks"}
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    @GetMapping
    public ResponseEntity<List<Task>> getAllTasks() {
        log.info("Request to get all tasks");
        List<Task> tasks = taskService.getAllTasks();
        return ResponseEntity.ok(tasks);
    }

    @Operation(
        summary = "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è",
        description = """
            –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—å–∫–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ.
            
            **–ö—Ä–æ–∫–∏:**
            1. –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞—î –∞–≤—Ç–æ—Ä–æ–º –∑–∞–≤–¥–∞–Ω–Ω—è
            2. –ó–∞–≤–¥–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å OPEN
            3. –ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            
            **–î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–∏–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** ORGANIZER, AFFECTED_PERSON
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "201", 
            description = "–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = TaskResponse.class),
                examples = @ExampleObject(
                    name = "–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è",
                    value = """
                        {
                          "id": 1,
                          "title": "–î–æ–ø–æ–º–æ–≥–∞ –∑ –ø–æ–∫—É–ø–∫–∞–º–∏",
                          "description": "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –ø–æ–∫—É–ø–∫–æ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤",
                          "status": "OPEN",
                          "maxParticipants": 2,
                          "createdAt": "2024-01-15T10:30:00"
                        }
                        """
                )
            )
        ),
        @ApiResponse(responseCode = "400", description = "–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π"),
        @ApiResponse(responseCode = "403", description = "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤")
    })
    @io.swagger.v3.oas.annotations.parameters.RequestBody(
        description = "–î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è",
        required = true,
        content = @Content(
            mediaType = "application/json",
            schema = @Schema(implementation = TaskCreateRequest.class),
            examples = @ExampleObject(
                name = "–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É",
                value = """
                    {
                      "title": "–î–æ–ø–æ–º–æ–≥–∞ –∑ –ø–æ–∫—É–ø–∫–∞–º–∏",
                      "description": "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –ø–æ–∫—É–ø–∫–æ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–ª—è –ª—ñ—Ç–Ω—å–æ—ó –ª—é–¥–∏–Ω–∏",
                      "location": "–ê–¢–ë, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 20",
                      "categoryId": 3,
                      "maxParticipants": 2,
                      "scheduledAt": "2024-01-20T14:00:00",
                      "requiredSkills": "–í–æ–¥—ñ–π—Å—å–∫—ñ –ø—Ä–∞–≤–∞ –±–∞–∂–∞–Ω–æ"
                    }
                    """
            )
        )
    )
    @PostMapping
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<TaskResponse> createTask(@Valid @RequestBody TaskCreateRequest request, Principal principal) {
        log.info("Request to create new task: {}", request.getTitle());
        
        try {
            // Get current user by keycloak ID
            String keycloakId = principal.getName();
            User creator = userService.getUserEntityByKeycloakId(keycloakId);
            
            // Get category
            Category category = categoryService.getCategoryEntityById(request.getCategoryId());
            
            // Map request to entity
            Task task = taskMapper.toEntity(request);
            task.setCreator(creator);
            task.setCategory(category);
            
            // Create task
            Task createdTask = taskService.createTask(task);
            
            // Map to response
            TaskResponse response = taskMapper.toResponse(createdTask);
            
            return ResponseEntity.status(201).body(response);
            
        } catch (Exception e) {
            log.error("Error creating task: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @Operation(
        summary = "–ü–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω—å –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏",
        description = """
            –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω—å –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
            
            **–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏:**
            - –¢–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–∞ –æ–ø–∏—Å—É
            - –§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            - –§—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            - –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ
            - –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            """,
        parameters = {
            @Parameter(name = "query", description = "–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É", example = "–¥–æ–ø–æ–º–æ–≥–∞"),
            @Parameter(name = "categoryId", description = "ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", example = "1"),
            @Parameter(name = "status", description = "–°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è", example = "OPEN"),
            @Parameter(name = "page", description = "–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏", example = "0"),
            @Parameter(name = "size", description = "–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏", example = "10")
        }
    )
    @GetMapping("/search")
    public ResponseEntity<Page<Task>> searchTasks(TaskSearchRequest searchRequest) {
        log.info("Request to search tasks with criteria: {}", searchRequest);
        
        Pageable pageable = PageRequest.of(searchRequest.getPage(), searchRequest.getSize());
        
        LocalDateTime dateFrom = searchRequest.getDateFrom() != null 
            ? searchRequest.getDateFrom().atStartOfDay() 
            : null;
        LocalDateTime dateTo = searchRequest.getDateTo() != null 
            ? searchRequest.getDateTo().atTime(23, 59, 59) 
            : null;
            
        Page<Task> tasks = taskService.searchTasks(
            searchRequest.getQuery(),
            searchRequest.getCategoryId(),
            searchRequest.getStatus(),
            dateFrom,
            dateTo,
            pageable
        );
        
        return ResponseEntity.ok(tasks);
    }

    @Operation(
        summary = "–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ ID",
        description = "–ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è.",
        parameters = @Parameter(name = "id", description = "–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è", example = "1")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–ó–∞–≤–¥–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ"),
        @ApiResponse(responseCode = "404", description = "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    })
    @GetMapping("/{id}")
    public ResponseEntity<Task> getTaskById(@PathVariable Long id) {
        log.info("Request to get task with ID: {}", id);
        return taskService.getTaskById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @Operation(
        summary = "–û–Ω–æ–≤–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
        description = """
            –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –¢—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–∂–µ –π–æ–≥–æ –æ–Ω–æ–≤–∏—Ç–∏.
            
            **–û–±–º–µ–∂–µ–Ω–Ω—è:**
            - –¢—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
            - –ù–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º COMPLETED
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<TaskResponse> updateTask(@PathVariable Long id, 
                                                  @Valid @RequestBody TaskCreateRequest request,
                                                  Principal principal) {
        log.info("Request to update task with ID: {}", id);
        
        try {
            // Get current user
            String keycloakId = principal.getName();
            User currentUser = userService.getUserEntityByKeycloakId(keycloakId);
            
            // Check if task exists and user has permission
            Task existingTask = taskService.getTaskById(id)
                .orElseThrow(() -> new RuntimeException("Task not found"));
                
            if (!existingTask.getCreator().getId().equals(currentUser.getId())) {
                return ResponseEntity.status(403).build(); // Forbidden
            }
            
            // Get category
            Category category = categoryService.getCategoryEntityById(request.getCategoryId());
            
            // Map request to entity
            Task updatedTask = taskMapper.toEntity(request);
            updatedTask.setCategory(category);
            
            // Update task
            Task updated = taskService.updateTask(id, updatedTask)
                .orElseThrow(() -> new RuntimeException("Failed to update task"));
            
            // Map to response
            TaskResponse response = taskMapper.toResponse(updated);
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Error updating task: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @Operation(
        summary = "–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
        description = "–í–∏–¥–∞–ª—è—î –∑–∞–≤–¥–∞–Ω–Ω—è. –¢—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è.",
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<Void> deleteTask(@PathVariable Long id, Principal principal) {
        log.info("Request to delete task with ID: {}", id);
        
        try {
            // Get current user
            String keycloakId = principal.getName();
            User currentUser = userService.getUserEntityByKeycloakId(keycloakId);
            
            // Check if task exists and user has permission
            Task existingTask = taskService.getTaskById(id)
                .orElseThrow(() -> new RuntimeException("Task not found"));
                
            if (!existingTask.getCreator().getId().equals(currentUser.getId())) {
                return ResponseEntity.status(403).build(); // Forbidden
            }
            
            boolean deleted = taskService.deleteTask(id);
            
            if (deleted) {
                return ResponseEntity.noContent().build();
            } else {
                return ResponseEntity.notFound().build();
            }
            
        } catch (Exception e) {
            log.error("Error deleting task: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @Operation(
        summary = "–ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º",
        description = "–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é."
    )
    @GetMapping("/status/{status}")
    public ResponseEntity<Page<Task>> getTasksByStatus(
        @Parameter(description = "–°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è", example = "OPEN") 
        @PathVariable TaskStatus status, 
        Pageable pageable) {
        log.info("Request to get tasks with status: {}", status);
        Page<Task> tasks = taskService.getTasksByStatus(status, pageable);
        return ResponseEntity.ok(tasks);
    }

    @Operation(
        summary = "–ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é",
        description = "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ–≤–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."
    )
    @GetMapping("/category/{categoryId}")
    public ResponseEntity<List<Task>> getTasksByCategory(
        @Parameter(description = "ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", example = "1") 
        @PathVariable Long categoryId) {
        log.info("Request to get tasks for category ID: {}", categoryId);
        List<Task> tasks = taskService.getTasksByCategory(categoryId);
        return ResponseEntity.ok(tasks);
    }

    @Operation(
        summary = "–ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –∞–≤—Ç–æ—Ä–æ–º",
        description = "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."
    )
    @GetMapping("/creator/{creatorId}")
    public ResponseEntity<List<Task>> getTasksByCreator(
        @Parameter(description = "ID –∞–≤—Ç–æ—Ä–∞ –∑–∞–≤–¥–∞–Ω–Ω—è", example = "1") 
        @PathVariable Long creatorId) {
        log.info("Request to get tasks created by user ID: {}", creatorId);
        List<Task> tasks = taskService.getTasksByCreator(creatorId);
        return ResponseEntity.ok(tasks);
    }

    @Operation(
        summary = "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
        description = """
            –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–µ.
            
            **–ü—Ä–∞–≤–∏–ª–∞:**
            - –¢—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–∂–µ –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏
            - –ó–∞–≤–¥–∞–Ω–Ω—è –æ—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å COMPLETED
            - –ó–∞–≤–µ—Ä—à–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
            """,
        security = @SecurityRequirement(name = "Bearer Authentication")
    )
    @PutMapping("/{id}/complete")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<Task> completeTask(
        @Parameter(description = "ID –∑–∞–≤–¥–∞–Ω–Ω—è", example = "1") @PathVariable Long id, 
        @Parameter(description = "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", example = "1") @RequestParam Long userId) {
        log.info("Request to complete task {} by user {}", id, userId);
        return taskService.completeTask(id, userId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}
